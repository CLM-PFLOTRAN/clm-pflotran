#!/usr/bin/env perl 
#
use strict;
use Cwd;
use File::Basename;
use Getopt::Long;

# Get input arguments
if ($#ARGV == -1) {
    usage();
}

my %opts = (
  file => undef,
  testtype => undef,
);

GetOptions(
    "file=s"     => \$opts{'file'},
    "testtype=s" => \$opts{'testtype'},
    "machine=s"  => \$opts{'machine'},
    "compiler=s" => \$opts{'compiler'},
    "h|help"     => \$opts{'help'},
    )  or usage();

if (@ARGV) {
    # Check for unparsed arguments
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

# Give usage message.
usage() if $opts{'help'};


my $file     = $opts{'file'};
my $testtype = $opts{'testtype'};
my $machine  = $opts{'machine'};
my $compiler = $opts{'compiler'};

open my $INPUT, "<", $file or die "can't open file";
my @lines = <$INPUT>;
close $INPUT;

my $text = <<"EOF";
<?xml version="1.0"?>
<newlist>
EOF
foreach my $line(@lines)
{
  chomp $line;
  next unless $line;
  my @tokens = split('\.', $line);
  my $testname = $tokens[0];
  my $res = $tokens[1];
  my $compset = $tokens[2];
  my $user_nl_dir = $tokens[3];

  if ($user_nl_dir) {
  $text .=  <<"EOF";
<compset name="$compset">
  <grid name="$res">
    <test name="$testname">
      <machine compiler="$compiler" testtype="$testtype" user_nl_dir="$user_nl_dir">$machine</machine>
    </test>
  </grid>
</compset>
EOF

  } else {

  $text .=  <<"EOF";
<compset name="$compset">
  <grid name="$res">
    <test name="$testname">
      <machine compiler="$compiler" testtype="$testtype">$machine</machine>
    </test>
  </grid>
</compset>
EOF
  }

}

$text .= <<"EOF";
</newlist>
EOF

print $text;
exit 0;

#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;
SYNOPSIS
     make_xml_entries [options]
DESCRIPTION
     translates a old-style list of testnames (testname.grid.compset[.user_nl_dir])
     into an xml format that can be input into add_xml_entries and thereby expand the current
     testing xml table
OPTIONS
     User supplied values are denoted in angle brackets (<>).  Any value that contains
     white-space must be quoted.  Long option names may be supplied with either single
     or double leading dashes.  A consequence of this is that single letter options may
     NOT be bundled.

     -file <name>         Standard test filename where each line nas the form
                          testname.grid.compset[.user_nl_dirs]
     -testtype <name>     one of current supported test type categories
     -machine <name>      one of current supported machine names 
     -compiler <name>     Specify a compiler for the target machine 
     -help [or -h]        Print usage to STDOUT (optional).
EOF
}

