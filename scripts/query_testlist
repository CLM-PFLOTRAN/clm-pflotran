#!/usr/bin/env perl 

#===================================================================
# Test suite and test creation script. 
#===================================================================
use strict;
use warnings;
use Cwd qw( getcwd abs_path );
use English;
use Getopt::Long;
use IO::File;
use IO::Handle;
use File::Basename;
use File::Copy;
use Data::Dumper;
use XML::LibXML;

# Get input arguments
if ($#ARGV == -1) {
    usage();
}

my %opts = (
    category => 'all',
    compiler => 'all',
    compset  => 'all',
    grid     => 'all',
    machine  => 'all',
    list     => 0, 
    );

GetOptions(
    "list=s"     => \$opts{'list'},
    "category=s" => \$opts{'category'},
    "compset=s"  => \$opts{'compset'},
    "compiler=s" => \$opts{'compiler'},
    "grid=s"     => \$opts{'grid'},
    "machine=s"  => \$opts{'machine'},
    "h|help"     => \$opts{'help'},
    );

if (@ARGV) {
    # Check for unparsed arguments
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

# Give usage message.
usage() if $opts{'help'};

# Parse the newlist file and add those entries to testlist.xml
my $parser = XML::LibXML->new;
my $list = $parser->parse_file('ccsm_utils/Testlistxml/testlist.xml');
my $root = $list->getDocumentElement();

my ($list_opt,$compset_opt,$grid_opt,$machine_opt,
    $category_opt,$compiler_opt);

$list_opt     = $opts{'list'};
$compset_opt  = $opts{'compset'};
$grid_opt     = $opts{'grid'};
$machine_opt  = $opts{'machine'};
$compiler_opt = $opts{'compiler'};
$category_opt = $opts{'category'};

my $list_compilers  = $opts{'compiler'};
my $list_grids      = $opts{'list_grids'}; 
my $list_machines   = $opts{'list_machines'}; 
my $list_categories = $opts{'list_categories'}; 
my $list_compsets   = $opts{'list_compsets'}; 


#----------------------------------------------------------------------------
# List compsets, machines, categories, compilers, grids
#----------------------------------------------------------------------------

if ($list_opt =~ /compsets/ ) {
    print "\n===================================\n";
    print " available compsets \n";
    print "===================================\n";
    my @list;
    foreach my $compset_elem ($root->findnodes('/testlist/compset')) { 
	my($val) = $compset_elem->getAttribute('name'); 
	push (@list, $val);
    }
    my %help;
    map { $help{$_}=1} @list;
    @list = keys %help;
    foreach my $val (sort @list) {
	print     "   $val \n";
    }
}

if ($list_opt =~ /grids/ ) {
    print "\n===================================\n";
    print " available grids \n";
    print "===================================\n";
    my @list;
    foreach my $grid_elem ($root->findnodes('/testlist/compset/grid')) { 
	my($val) = $grid_elem->getAttribute('name'); 
	push (@list, $val);
    }
    my %help;
    map { $help{$_}=1} @list;
    @list = keys %help;
    foreach my $val (sort @list) {
	print     "   $val \n";
    }
}

if ($list_opt =~ /machines/ ) {
    print "\n===================================\n";
    print " available machines \n";
    print "===================================\n";
    my @list;
    foreach my $elem ($root->findnodes('/testlist/compset/grid/test/machine')) { 
	my($val) = $elem->textContent; 
	push (@list, $val);
    }
    my %help;
    map { $help{$_}=1} @list;
    @list = keys %help;
    foreach my $val (sort @list) {
	print     "   $val \n";
    }
}

if ($list_opt =~ /categories/ ) {
    print "\n===================================\n";
    print " available test categories \n";
    print "===================================\n";
    my @list;
    foreach my $mach_elem ($root->findnodes('/testlist/compset/grid/test/machine')) { 
	my($category) = $mach_elem->getAttribute('testtype'); 
	push (@list, $category);
    }
    my %help;
    map { $help{$_}=1} @list;
    @list = keys %help;
    foreach my $litem (sort @list) {
	print     "  $litem \n";
    }
}

if ($list_opt =~ /compilers/ ) {
    print "\n===================================\n";
    print " available compilers \n";
    print "===================================\n";
    my @list;
    foreach my $mach_elem ($root->findnodes('/testlist/compset/grid/test/machine')) { 
	my($category) = $mach_elem->getAttribute('compiler'); 
	push (@list, $category);
    }
    my %help;
    map { $help{$_}=1} @list;
    @list = keys %help;
    foreach my $val (sort @list) {
	print     "   $val \n";
    }
}


my $comphash;
foreach my $compset ($root->findnodes('/testlist/compset')) { 
    my $name = $compset->getAttribute('name');
    $comphash->{$name}={};
    foreach my $grid ($compset->findnodes('./grid')){
	my $gname = $grid->getAttribute('name');
	$comphash->{$name}{$gname}={};
	foreach my $test ($grid->findnodes('./test')){
	    my $tname = $test->getAttribute('name');
	    $comphash->{$name}{$gname}{$tname}={};
	    foreach my $mach ($test->findnodes('./machine')){
		my $compiler = $mach->getAttribute('compiler');
		my $testtype = $mach->getAttribute('testtype');
		my $nldir    = $mach->getAttribute('nldir');
		if (!$nldir) {
		    $nldir = 'all';
		}
		my $mname    = $mach->textContent;
		$comphash->{$name}{$gname}{$tname}{$mname}{$compiler}{$testtype}{$nldir}=1;
	    }
	}
    }	           
}	

foreach my $cname (sort keys %$comphash){
    if ($compset_opt ne 'all') {
	next unless ($cname eq $compset_opt);
    }
    foreach my $gname (sort keys %{$comphash->{$cname}}){
	if ($grid_opt ne 'all') {
	    next unless ($gname eq $grid_opt);
	}
	foreach my $tname (sort keys %{$comphash->{$cname}{$gname}}){
	    foreach my $mname (sort keys %{$comphash->{$cname}{$gname}{$tname}}){
		if ($machine_opt ne 'all') {
		    next unless ($mname eq $machine_opt);
		}
		foreach my $cpname (keys %{$comphash->{$cname}{$gname}{$tname}{$mname}}){
		    foreach my $ttype (keys %{$comphash->{$cname}{$gname}{$tname}{$mname}{$cpname}}){
			if ($category_opt ne 'all') {
			    next unless ($ttype eq $category_opt);
			}
			printf   ("   %-12s %-12s %-12s %-12s  %-12s %-10s \n", 
				  $cname, $gname, $tname, $mname, $cpname, $ttype);
		    }
		}
	    }
	}
    }
}

exit 0;

#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;
SYNOPSIS

     query_tests [options]

DESCRIPTION

     Queries the file "ccsm_utils/Testlistxml/testlist.xml" for 
     compsets, grids, machines, compilers and test categories

OPTIONS

     User supplied values are denoted in angle brackets (<>).  Any value that contains
     white-space must be quoted.  Long option names may be supplied with either single
     or double leading dashes.  A consequence of this is that single letter options may
     NOT be bundled.

     The following are independent selectors - these are optional arguments and can
     all be specified

     -list_categories      list available test categories 
     -list_compilers       list available test compilers 
     -list_compsets        list available test compsets 
     -list_machines        list available test categories 
     -list_grids           list available test categories 

     ONLY ONE of the following three groups may be selected

     -compset <name>          limit selection to only target compset
     -compset_grid <name>     limit compset selection further by target grid
     -compset_machine <name>  limit compset selection further by target machine

     -machine <name>          limit selection to only target machine
     -machine_compiler <name> limit machine selection further by target compiler
     -machine_category <name> limit machine selection further by target category

     -category <name>         limit selection to only target test category
     -category_machine <name> limit category selection further to target machine

     Usage command

     -help [or -h]       Print usage to STDOUT (optional).
EOF
}

