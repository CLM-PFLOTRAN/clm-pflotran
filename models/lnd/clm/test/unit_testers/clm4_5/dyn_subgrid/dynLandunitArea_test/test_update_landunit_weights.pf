module test_update_landunit_weights

  ! Tests of the update_landunit_weights routine in the dynLandunitArea module

  use pfunit_mod
  use dynLandunitAreaMod
  use shr_kind_mod   , only : r8 => shr_kind_r8
  use clm_varcon, only : istsoil, istcrop, istice, istice_mec, istdlak, istwet, &
       isturb_tbd, isturb_hd, isturb_md, max_lunit, ispval
  use clmtype, only : grc, lun
  use decompMod, only : bounds_type

  implicit none
  save

  real(r8), parameter :: tol = 1.e-14_r8

contains

  subroutine cleanup()
    deallocate(grc%landunit_indices)
    deallocate(lun%wtgcell)
  end subroutine cleanup


  @Test
  subroutine test_one_gcell_all_lunits()
    ! Test update_landunit_weights with a single grid cell, which has all landunits
    ! present

    integer :: index_soil, index_crop, index_icemec, index_urbmd
    type(bounds_type) :: bounds
    real(r8) :: expected(max_lunit)
    
    bounds%begg = 1
    bounds%endg = 1
    
    allocate(grc%landunit_indices(max_lunit,1))
    ! the following is deliberately out of order
    grc%landunit_indices(:,1) = [2,4,6,8,1,3,5,7,9]

    allocate(lun%wtgcell(max_lunit))
    ! the following sums to 1
    ! type:         5         1       6       2       7       3      8      4        9
    lun%wtgcell = [.16_r8, .14_r8, .08_r8, .25_r8, .06_r8, .05_r8, .04_r8, .2_r8, .02_r8]

    ! In the following, we assume that the first few elements of decrease_order are:
    ! istsoil, istcrop, isturb_md

    ! First increase the area of istice_mec: weights of istice_mec + istsoil + istcrop + 0.01
    index_soil = grc%landunit_indices(istsoil,1)
    index_crop = grc%landunit_indices(istcrop,1)
    index_icemec = grc%landunit_indices(istice_mec,1)
    index_urbmd = grc%landunit_indices(isturb_md,1)
    lun%wtgcell(index_icemec) = lun%wtgcell(index_icemec) + lun%wtgcell(index_soil) + lun%wtgcell(index_crop) + 0.01_r8

    ! Now set the expected outcome
    expected = lun%wtgcell
    expected(index_soil) = 0._r8
    expected(index_crop) = 0._r8
    expected(index_urbmd) = expected(index_urbmd) - 0.01_r8

    call update_landunit_weights(bounds)
    @assertEqual(expected, lun%wtgcell, tolerance=tol)

    call cleanup()
  end subroutine test_one_gcell_all_lunits

  @Test
  subroutine test_one_gcell_some_lunits()
    ! Test update_landunit_weights with a single grid cell, which has only some landunits
    ! present

    type(bounds_type) :: bounds
    real(r8) :: expected(3)

    bounds%begg = 1
    bounds%endg = 1

    allocate(grc%landunit_indices(max_lunit,1))
    grc%landunit_indices = ispval
    grc%landunit_indices(istcrop,1) = 3
    grc%landunit_indices(istice_mec,1) = 2
    grc%landunit_indices(istwet,1) = 1

    allocate(lun%wtgcell(3))
    ! type:       istwet  istice_mec istcrop
    lun%wtgcell = [0.3_r8, 0.8_r8,   0.5_r8]
    
    ! In the following, we assume that crop is decreased before wetland:
    expected = [0.2_r8, 0.8_r8, 0.0_r8]

    call update_landunit_weights(bounds)
    @assertEqual(expected, lun%wtgcell, tolerance=tol)

    call cleanup()
  end subroutine test_one_gcell_some_lunits

  @Test
  subroutine test_multiple_gcells()
    ! Test update_landunit_weights with multiple grid cells
    
    type(bounds_type) :: bounds
    real(r8) :: expected(6)

    bounds%begg = 1
    bounds%endg = 3

    allocate(grc%landunit_indices(max_lunit, 3))
    grc%landunit_indices = ispval
    grc%landunit_indices(istice_mec, 2) = 1
    grc%landunit_indices(istcrop, 3) = 2
    grc%landunit_indices(isturb_md, 1) = 3
    grc%landunit_indices(istice_mec, 3) = 4
    grc%landunit_indices(istcrop, 1) = 5
    grc%landunit_indices(istsoil, 2) = 6
    
    allocate(lun%wtgcell(6))
    ! grid cell 1 needs decrease in crop
    ! grid cell 2 needs increase in soil
    ! grid cell 3 stays the same
    ! gcell:      2        3       1         3      1        2
    ! type:      icemec    crop    urbmd    icemec  crop     soil
    lun%wtgcell = [0.8_r8, 0.6_r8, 0.45_r8, 0.4_r8, 0.7_r8,  0.1_r8]
    expected =    [0.8_r8, 0.6_r8, 0.45_r8, 0.4_r8, 0.55_r8, 0.2_r8] 

    call update_landunit_weights(bounds)
    @assertEqual(expected, lun%wtgcell, tolerance=tol)

    call cleanup()
  end subroutine test_multiple_gcells

end module test_update_landunit_weights
