# Utilities to work with lists of sources across multiple directories, and
# to allow a VPATH-like search, picking sources from a list based on their
# basename and the order in which they were added.

# For each relative path in ${file_list}, prepend ${base_directory} to make
# an absolute path, and put result in list named by ${new_list_name}.
function(expand_relative_paths file_list base_directory new_list_name)

  unset(${new_list_name})
  foreach(file IN LISTS file_list)
    if(IS_ABSOLUTE "${file}")
      set(new_file "${file}")
    else()
      set(new_file "${base_directory}/${file}")
    endif()
    list(APPEND ${new_list_name} "${new_file}")
  endforeach()

  set(${new_list_name} "${${new_list_name}}" PARENT_SCOPE)

endfunction(expand_relative_paths)

# Expand relative paths in a named source list, and export to parent scope.
# The idea here is to communicate the list between a directory added with
# add_subdirectory, and the directory above it.
macro(sourcelist_to_parent source_list_name)
  expand_relative_paths("${${source_list_name}}"
    ${CMAKE_CURRENT_SOURCE_DIR} ${source_list_name})
  set(${source_list_name} "${${source_list_name}}" PARENT_SCOPE)
endmacro(sourcelist_to_parent)

# Find an absolute file path in ${all_sources} for each base name in
# ${sources_needed}, and append found paths to the list named by
# ${source_list_name}.
function(extract_sources sources_needed all_sources source_list_name)

  foreach(needed_source IN LISTS sources_needed)

    set(source_match source-NOTFOUND)

    foreach(source IN LISTS all_sources)
      get_filename_component(basename ${source} NAME)
      if(${basename} STREQUAL ${needed_source})
        set(source_match ${source})
      endif()
    endforeach()

    if(NOT source_match)
      message(FATAL_ERROR
        "Source file not found: ${needed_source}
After searching in list: ${${all_sources}}")
    endif()

    list(APPEND ${source_list_name} ${source_match})

  endforeach()

  set(${source_list_name} "${${source_list_name}}" PARENT_SCOPE)

endfunction(extract_sources)

# Handles dependencies between files generated in one directory and a
# target in another.
# Given a target and a list of files, sets the GENERATED property for each
# file, and makes the target depend on a custom target generated from the
# extensionless base file name. (E.g. for /path/to/foo.F90, it will assume
# that it is generated by a custom target called generate_foo).
function(declare_generated_dependencies target generated_list)
  foreach(file IN LISTS generated_list)

    set_source_files_properties(${file} PROPERTIES GENERATED 1)

    get_filename_component(stripped_name ${file} NAME_WE)

    add_dependencies(${target} generate_${stripped_name})

  endforeach()
endfunction(declare_generated_dependencies)
